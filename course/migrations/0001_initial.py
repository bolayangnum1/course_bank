# Generated by Django 3.2.8 on 2022-05-14 09:12

import ckeditor_uploader.fields
import cloudinary.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('topik', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('test', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255, verbose_name='Название курса')),
                ('text', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Введите описание')),
                ('img', cloudinary.models.CloudinaryField(blank=True, max_length=255, verbose_name='Файл png.')),
                ('types', models.CharField(choices=[('1', '12 часов'), ('2', '16 часов'), ('3', '72 часов')], max_length=50, verbose_name='Академическoe время')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Введите стоимость покупки курса')),
                ('time_work', models.IntegerField(default=7, verbose_name='Длительность')),
                ('created_date', models.DateTimeField(blank=True, default=datetime.datetime.now, verbose_name='Начало курса')),
                ('published_date', models.DateTimeField(blank=True, default=datetime.datetime.now, verbose_name='Завершение курса')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='test.test', verbose_name='Тест')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='TextCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Введите описание')),
                ('cou', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='course.course')),
            ],
            options={
                'verbose_name': 'Описание курса',
                'verbose_name_plural': 'Описание курсов',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='подписан')),
                ('created_date', models.DateTimeField(blank=True, default=datetime.datetime.now, verbose_name='Дата активации')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='course.course', verbose_name='Активен')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Подписка на курс',
                'verbose_name_plural': 'Подписки на курсы',
            },
        ),
        migrations.CreateModel(
            name='Scoreboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, verbose_name='Баллы')),
                ('point', models.IntegerField(default=0, verbose_name='Правильные ответы')),
                ('fail', models.IntegerField(default=0, verbose_name='неправильные ответы')),
                ('created_date', models.DateTimeField(blank=True, default=datetime.datetime.now, verbose_name='Дата сдачи теста')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='course.course', verbose_name='Пройден')),
                ('quiz_room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='test.test', verbose_name='Тест')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Итог теста',
                'verbose_name_plural': 'Итоги тестов',
            },
        ),
        migrations.CreateModel(
            name='ChoiceTopicCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choicetopic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='topicchoice', to='topik.choicetopic', verbose_name='Темы')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='coursechoice', to='course.course', verbose_name='Курсы')),
            ],
            options={
                'verbose_name': 'Выберите тему',
                'verbose_name_plural': 'Выберите темы',
            },
        ),
        migrations.CreateModel(
            name='ApplicationToAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activation', models.BooleanField(default=False, verbose_name='Подтвердите активацию')),
                ('created_date', models.DateTimeField(blank=True, default=datetime.datetime.now, verbose_name='Дата заявки')),
                ('applicationcourse', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='application_detail', to='course.course', unique=True, verbose_name='В ожидании активации курса')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'В ожидании активации курса',
                'verbose_name_plural': 'В ожидании активации курсов',
                'ordering': ('-created_date',),
            },
        ),
    ]
